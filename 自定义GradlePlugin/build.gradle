apply plugin: 'com.android.application'
//使用自定义gradle插件===1  该形式下使用插件定义插件需在buildSrc名称的目录下才能被识别
apply plugin: com.plugin.second.SecondPlugin
//使用自定义gradle插件===2  其中plugin的名字，就是前面GradlePlugin工程创建com.lzl.gradle.properties中的名字——com.lzl.gradle，通过这种方式，就加载了自定义的插件
apply plugin: 'com.lzl.gradle'

//apply plugin: com.lzl.plugin.MyPlugin
android {
    compileSdkVersion 26



    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

}
/**
 * 配置Extension
 * 在主项目的build.gradle文件中，通过如下所示的代码来加载Extension：
 */
ExtensionBuildSrc {
    message = '通过Extension 向gradle插件传递参数===='
}
