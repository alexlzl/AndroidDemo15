apply plugin: 'com.android.application'

android {
    compileSdkVersion 26



    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}
/**
 * 设置和读取Project的Property是使用Gradle的一个很重要的方面。
 * 比如，很多Plugin都会向Project中加入额外的Property，在使用这些Plugin时，我们需要对这些Property进行赋值。
 * Gradle在默认情况下已经为Project定义了很多Property，其中比较常用的有：
 * project：Project本身
 * name：Project的名字
 * path：Project的绝对路径
 * description：Project的描述信息
 * buildDir：Project构建结果存放目录
 * version：Project的版本号
 */
version = 'this is the project version'
description = 'this is the project description'
/**
 * 请注意，在打印description时，我们使用了project.description，而不是直接使用description。
 * 原因在于，Project和Task都拥有description属性，而定义Task的闭包将delegate设置成了当前的Task，
 * 故如果直接使用description，此时打印的是showProjectProperties的description，而不是Project的，所以我们需要显式地指明project。
 */
task showProjectProperties << {
    println version
    println project.description
}

/**
 * 在build.gradle文件中向Project添加额外的Property时，我们并不能直接定义，而是应该通过ext来定义。如果要添加一个名为property1的Property，我们应该：
 */
ext.property1 = "this is property1"

/**
 * 另外，我们也可以通过闭包的方式：
 */
ext {
    property2 = "this is property2"
}

/**
 * 事实上，任何实现了ExtensionAware接口的Gradle对象都可以通过这种方式来添加额外的Property，比如Task也实现了该接口。
 */
task showProperties << {
    println property1
    println property2
}

/**
 * Gradle还提供了-P命令行参数来设置Property，比如：
 *
 * gradle -P property3="this is property3" showCommandLieProperties
 *
 * 我们知道，在java中，我们可以通过-D参数定义JVM的系统参数，然后在代码中可以可以通过System.getProperty()进行获取。
 * 在Gradle中，我们也可以通过-D的方式向Project传入Property，只是此时我们需要遵循一些约定：每一个通过-D方式声明的Property都需要以“org.gradle.project”为前缀，
 * 对于上面的showCommandLieProperties，我们也可以通过以下方式设置property3：
 * gradle -D org.gradle.project.property3="this is another property3" showCommandLieProperties
 */

task showCommandLieProperties << {
    println property3
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}
